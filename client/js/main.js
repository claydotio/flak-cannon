(function() {
  var ConversionState, ConversionStore, ExperimentState, ExperimentStore, QueryBuilder, RecoilController, RecoilView, ResultModel, ShowState, SparkLine, isPSignificant, nMinusOneChiSquare, pFromZ,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SparkLine = function(data) {
    var sparkline;
    sparkline = function($el, isInit) {
      var graph, palette;
      if (isInit) {
        return;
      }
      palette = new Rickshaw.Color.Palette();
      graph = new Rickshaw.Graph({
        element: $el,
        width: 100,
        height: 50,
        renderer: 'line',
        series: [
          {
            data: _.map(data, function(datum, i) {
              return {
                x: i,
                y: datum.count
              };
            }),
            color: palette.color()
          }
        ]
      });
      return graph.render();
    };
    return m('div.sparkline', {
      config: sparkline
    });
  };

  nMinusOneChiSquare = function(aConversions, aTotal, bConversions, bTotal) {
    var N, a, b, c, chi2, d, m, n, r, s, z;
    a = aConversions;
    b = aTotal - aConversions;
    c = bConversions;
    d = bTotal - bConversions;
    r = a + c;
    s = b + d;
    m = a + b;
    n = c + d;
    N = m + n + r + s;
    chi2 = Math.pow(a * d - b * c, 2) * (N - 1) / (m * n * r * s);
    z = Math.sqrt(Math.abs(chi2));
    return 1 - pFromZ(z);
  };

  pFromZ = function(z) {
    var Z_MAX, w, x, y;
    Z_MAX = 6.0;
    if (z === 0.0) {
      x = 0.0;
    } else {
      y = 0.5 * Math.abs(z);
      if (y > (Z_MAX * 0.5)) {
        x = 1.0;
      } else if (y < 1.0) {
        w = y * y;
        x = ((((((((0.000124818987 * w - 0.001075204047) * w + 0.005198775019) * w - 0.019198292004) * w + 0.059054035642) * w - 0.151968751364) * w + 0.319152932694) * w - 0.531923007300) * w + 0.797884560593) * y * 2.0;
      } else {
        y -= 2.0;
        x = (((((((((((((-0.000045255659 * y + 0.000152529290) * y - 0.000019538132) * y - 0.000676904986) * y + 0.001390604284) * y - 0.000794620820) * y - 0.002034254874) * y + 0.006549791214) * y - 0.010557625006) * y + 0.011630447319) * y - 0.009279453341) * y + 0.005353579108) * y - 0.002141268741) * y + 0.000535310849) * y + 0.999936657524;
      }
    }
    if (z > 0.0) {
      return (x + 1.0) * 0.5;
    } else {
      return (1.0 - x) * 0.5;
    }
  };

  isPSignificant = function(p) {
    return p > 0.05;
  };

  ResultModel = (function() {
    function ResultModel() {
      this.query = __bind(this.query, this);
    }

    ResultModel.prototype.transform = function(data) {
      var control;
      data = data.map(function(result) {
        result.totalConversions = _.reduce(result.data, function(sum, datum) {
          return sum + datum.count;
        }, 0);
        return result;
      });
      if (!data[0]) {
        return [];
      }
      control = data[0];
      control.p = 0;
      control.percentDelta = 0;
      data = data.slice(1).map(function(result) {
        var aConversions, aPercent, aTotal, bConversions, bPercent, bTotal, p, percentDelta;
        aConversions = result.totalConversions;
        aTotal = result.participantCount;
        bConversions = control.totalConversions;
        bTotal = control.participantCount;
        aPercent = aConversions / aTotal;
        bPercent = bConversions / bTotal;
        percentDelta = aPercent - bPercent;
        p = nMinusOneChiSquare(aConversions, aTotal, bConversions, bTotal);
        result.p = p;
        result.percentDelta = percentDelta;
        return result;
      });
      data = [control].concat(_.sortBy(data, 'percentDelta').reverse());
      return data;
    };

    ResultModel.prototype.data = (function() {
      var def;
      def = m.deferred();
      def.resolve([]);
      return def.promise;
    })();

    ResultModel.prototype.query = function(q) {
      q = _.defaults(q, {
        experiment: '',
        start: '',
        end: '',
        splits: '',
        conversion: '',
        namespace: ''
      });
      return m.request({
        method: 'GET',
        url: "/api/" + q.namespace + "/experiments/" + q.experiment + "/results\n?from=" + (moment(q.start).format('L')) + "\n&to=" + (moment(q.end).format('L')) + "\n&split=" + q.splits + "\n&conversion=" + q.conversion
      }).then(this.transform).then(this.data);
    };

    return ResultModel;

  })();

  QueryBuilder = function(queryHandler) {
    var conversion, end, experiment, namespace, query, splits, start;
    experiment = m.prop('signupText');
    start = m.prop(moment().subtract('days', 14).format('L').toString());
    end = m.prop(moment().format('L').toString());
    splits = m.prop('');
    conversion = m.prop('signUp');
    namespace = m.prop('');
    query = function() {
      return queryHandler({
        experiment: experiment(),
        start: start(),
        end: end(),
        splits: splits(),
        conversion: conversion(),
        namespace: namespace()
      });
    };
    return function() {
      return m('div', [
        m('input', {
          value: namespace(),
          placeholder: 'namespace',
          onchange: m.withAttr('value', namespace)
        }), m('input', {
          value: experiment(),
          placeholder: 'experiment',
          onchange: m.withAttr('value', experiment)
        }), m('input', {
          value: start(),
          placeholder: 'start',
          onchange: m.withAttr('value', start)
        }), m('input', {
          value: end(),
          placeholder: 'end',
          onchange: m.withAttr('value', end)
        }), m('input', {
          value: splits(),
          placeholder: 'splits (, separated)',
          onchange: m.withAttr('value', splits)
        }), m('input', {
          value: conversion(),
          placeholder: 'conversion',
          onchange: m.withAttr('value', conversion)
        }), m('button', {
          onclick: query
        }, 'go')
      ]);
    };
  };

  ExperimentStore = (function() {
    var data;
    data = m.request({
      method: 'GET',
      url: '/api/experiments'
    });
    return {
      getAll: function() {
        return data;
      }
    };
  })();

  ConversionStore = (function() {
    var data;
    data = m.request({
      method: 'GET',
      url: '/api/conversions/uniq'
    });
    return {
      getAll: function() {
        return data;
      }
    };
  })();

  ExperimentState = function(experiments) {
    return m('ul', experiments.map(function(experiment) {
      return m('li', [
        experiment.name + (" (" + experiment.namespace + ")"), m('ul', experiment.values.map(function(val) {
          return m('li', val);
        }))
      ]);
    }));
  };

  ConversionState = function(conversions) {
    return m('ul', conversions.map(function(conversion) {
      return m('li', conversion.name + (" (" + conversion.namespace + ")"));
    }));
  };

  ShowState = function(experiments, conversions) {
    return ['Experiments', ExperimentState(experiments), 'Conversions', ConversionState(conversions)];
  };

  RecoilController = function() {
    var results;
    results = new ResultModel;
    return {
      results: results,
      experiments: ExperimentStore.getAll(),
      conversions: ConversionStore.getAll(),
      queryBuilder: QueryBuilder(results.query)
    };
  };

  RecoilView = function(ctrl) {
    var percent, results, titles;
    results = ctrl.results.data() || [];
    titles = ['test', 'sparkline'].concat(results[0] ? _.keys(results[0].splits) : void 0).concat(['conversions', 'participants', 'percent', 'p < 0.05', 'delta']);
    percent = function(n) {
      return (n * 100).toFixed(2) + '%';
    };
    return [
      ShowState(ctrl.experiments(), ctrl.conversions()), m('br'), ctrl.queryBuilder(), m('br'), !results.length ? 'NO RESULTS' : void 0, m('table', titles.map(m.bind(m, 'th')).concat(_.map(_.values(results), function(result) {
        var color;
        color = result.percentDelta > 0 ? 'green' : result.percentDelta === 0 ? 'black' : 'red';
        return m('tr', [m('td', result.test), m('td', [SparkLine(result.data)])].concat(_.map(_.values(result.splits), m.bind(m, 'td'))).concat([
          m('td', result.totalConversions), m('td', result.participantCount), m('td', percent(result.totalConversions / result.participantCount)), m('td', result.p.toFixed(3)), m('td', {
            style: {
              color: color
            }
          }, percent(result.percentDelta))
        ]));
      })))
    ];
  };

  m.module(document.getElementById('recoil'), {
    controller: RecoilController,
    view: RecoilView
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,